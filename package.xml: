<?xml version="1.0"?>
<package format="3">
  <name>my_image_subscriber</name>
  <version>0.0.0</version>
  <description>ROS2 image subscriber package</description>
  <maintainer email="user@user.com">user</maintainer>
  <license>Apache License 2.0</license>

  <depend>rclpy</depend>
  <depend>sensor_msgs</depend>
  <depend>cv_bridge</depend>
  <depend>opencv2</depend>

  <export>
    <build_type>ament_python</build_type>
  </export>
</package>

setup.py:
from setuptools import setup

setup(
    name='my_image_subscriber',
    version='0.0.0',
    packages=['my_image_subscriber'],
    data_files=[
        ('share/ament_index/resource_index/packages',
            ['resource/my_image_subscriber']),
        ('share/my_image_subscriber', ['package.xml']),
    ],
    install_requires=['setuptools'],
    zip_safe=True,
    maintainer='user',
    maintainer_email='user@user.com',
    description='ROS2 image subscriber package',
    license='Apache License 2.0',
    tests_require=['pytest'],
    entry_points={
        'console_scripts': [
            'image_subscriber = my_image_subscriber.image_subscriber:main',
        ],
    },
)
```

image_subscriber.py:
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2

class ImageSubscriber(Node):
    def __init__(self):
        super().__init__('image_subscriber')
        self.subscription = self.create_subscription(
            Image,
            '/robotcar/camera/image_raw',
            self.listener_callback,
            10)
        self.bridge = CvBridge()

    def listener_callback(self, msg):
        try:
            cv_image = self.bridge.imgmsg_to_cv2(msg, "bgr8")
        except Exception as e:
            self.get_logger().error(f'Error converting image: {e}')
            return

        # Отображение изображения
        cv2.imshow('Camera View', cv_image)
        cv2.waitKey(1)
        
        # Логирование первого пикселя
        self.get_logger().info(f'First pixel value: {cv_image[0,0]}')

def main(args=None):
    rclpy.init(args=args)
    image_subscriber = ImageSubscriber()
    try:
        rclpy.spin(image_subscriber)
    except KeyboardInterrupt:
        image_subscriber.get_logger().info('Keyboard Interrupt')
    finally:
        image_subscriber.destroy_node()
        rclpy.shutdown()
        cv2.destroyAllWindows()

if __name__ == '__main__':
    main()
```
